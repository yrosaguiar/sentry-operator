// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"sync"

	"github.com/yrosaguiar/sentry-operator/controllers"
	"github.com/yrosaguiar/sentry-operator/pkg/sentry"
)

type FakeSentryOrganizations struct {
	ListProjectsStub        func(string, *sentry.ListOptions) ([]sentry.Project, *sentry.Response, error)
	listProjectsMutex       sync.RWMutex
	listProjectsArgsForCall []struct {
		arg1 string
		arg2 *sentry.ListOptions
	}
	listProjectsReturns struct {
		result1 []sentry.Project
		result2 *sentry.Response
		result3 error
	}
	listProjectsReturnsOnCall map[int]struct {
		result1 []sentry.Project
		result2 *sentry.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSentryOrganizations) ListProjects(arg1 string, arg2 *sentry.ListOptions) ([]sentry.Project, *sentry.Response, error) {
	fake.listProjectsMutex.Lock()
	ret, specificReturn := fake.listProjectsReturnsOnCall[len(fake.listProjectsArgsForCall)]
	fake.listProjectsArgsForCall = append(fake.listProjectsArgsForCall, struct {
		arg1 string
		arg2 *sentry.ListOptions
	}{arg1, arg2})
	fake.recordInvocation("ListProjects", []interface{}{arg1, arg2})
	fake.listProjectsMutex.Unlock()
	if fake.ListProjectsStub != nil {
		return fake.ListProjectsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.listProjectsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSentryOrganizations) ListProjectsCallCount() int {
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	return len(fake.listProjectsArgsForCall)
}

func (fake *FakeSentryOrganizations) ListProjectsCalls(stub func(string, *sentry.ListOptions) ([]sentry.Project, *sentry.Response, error)) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = stub
}

func (fake *FakeSentryOrganizations) ListProjectsArgsForCall(i int) (string, *sentry.ListOptions) {
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	argsForCall := fake.listProjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSentryOrganizations) ListProjectsReturns(result1 []sentry.Project, result2 *sentry.Response, result3 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	fake.listProjectsReturns = struct {
		result1 []sentry.Project
		result2 *sentry.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSentryOrganizations) ListProjectsReturnsOnCall(i int, result1 []sentry.Project, result2 *sentry.Response, result3 error) {
	fake.listProjectsMutex.Lock()
	defer fake.listProjectsMutex.Unlock()
	fake.ListProjectsStub = nil
	if fake.listProjectsReturnsOnCall == nil {
		fake.listProjectsReturnsOnCall = make(map[int]struct {
			result1 []sentry.Project
			result2 *sentry.Response
			result3 error
		})
	}
	fake.listProjectsReturnsOnCall[i] = struct {
		result1 []sentry.Project
		result2 *sentry.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSentryOrganizations) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listProjectsMutex.RLock()
	defer fake.listProjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSentryOrganizations) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.SentryOrganizations = new(FakeSentryOrganizations)
